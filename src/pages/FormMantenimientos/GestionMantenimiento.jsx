/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/0M92mmcTgdm
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useEffect   } from "react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import useGetData from "@/hooks/useGetData"

export function GestionMantenimiento() {
  const { data, error, loading } = useGetData(["equipos"]);
  const equipos = data?.equipos || [];
  const [equipoSeleccionado, setEquipoSeleccionado] = useState(null)
  const [busqueda, setBusqueda] = useState("")
  const [tareaSeleccionada, setTareaSeleccionada] = useState(null)
  const [observaciones, setObservaciones] = useState("")

  const handleSeleccionarEquipo = (equipo) => {
    setEquipoSeleccionado(equipo)
  }
  const handleMarcarFalla = (equipoId) => {
    setTareaSeleccionada(equipoId)
  }
  const handleMarcarCompletado = (equipoId) => {
    setEquipos((prevEquipos) => {
      return prevEquipos.map((equipo) => {
        if (equipo.id === equipoId) {
          return { ...equipo, estado: "En uso" }
        }
        return equipo
      });
    })
    setTareaSeleccionada(null)
    setObservaciones("")
  }
  const handleGuardarObservaciones = () => {
    setEquipos((prevEquipos) => {
      return prevEquipos.map((equipo) => {
        if (equipo.id === tareaSeleccionada) {
          return { ...equipo, observaciones }
        }
        return equipo
      });
    })
    setTareaSeleccionada(null)
    setObservaciones("")
  }
  const filteredEquipos = equipos.filter((equipo) => equipo.marca.toLowerCase().includes(busqueda.toLowerCase()))
    if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>{error}</div>;
  }
  return (
    (<div className="flex flex-col h-screen">
      <header className="bg-primary text-primary-foreground py-4 px-6">
        <h1 className="text-2xl font-bold">Gestión de Mantenimiento</h1>
      </header>
      <div className="flex-1 grid grid-cols-1 md:grid-cols-2 gap-6 p-6">
        <div className="bg-background rounded-lg shadow-md p-6">
          <h2 className="text-xl font-bold mb-4">Equipos</h2>
          <div className="mb-4">
            <Input
              type="text"
              placeholder="Buscar equipo..."
              value={busqueda}
              onChange={(e) => setBusqueda(e.target.value)}
              className="w-full" />
          </div>
          <div className="grid gap-4">
            {filteredEquipos.map((equipo) => (
              <div
                key={equipo.serial}
                className={`bg-card text-card-foreground rounded-lg p-4 cursor-pointer transition-colors hover:bg-muted ${
                  equipoSeleccionado?.serial === equipo.serial ? "bg-muted" : ""
                }`}
                onClick={() => handleSeleccionarEquipo(equipo)}>
                <div className="flex justify-between items-center">
                  <h3 className="text-lg font-semibold">{equipo.referencia}</h3>
                  <span
                    className={`px-2 py-1 rounded-full text-xs font-medium ${
                      equipo.estado === "En uso" ? "bg-green-500 text-green-50" : "bg-yellow-500 text-yellow-50"
                    }`}>
                    {equipo.estado}
                  </span>
                </div>
                <div className="text-muted-foreground text-sm">
                  <p>Serial: {equipo.serial}</p>
                  <p>Hostname: {equipo.hostname}</p>
                  <p>Último mantenimiento: {equipo.ultimoMantenimiento}</p>
                  <p>Próximo mantenimiento: {equipo.proximoMantenimiento}</p>
                  <p>Propietario: {equipo.propietario}</p>
                  <p>Responsable: {equipo.responsable}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
        {equipoSeleccionado && (
          <div className="bg-background rounded-lg shadow-md p-6">
            <h2 className="text-xl font-bold mb-4">Checklist de Mantenimiento - {equipoSeleccionado.nombre}</h2>
            <div className="grid gap-4">
              <div
                className="bg-card text-card-foreground rounded-lg p-4 flex justify-between items-center">
                <div>
                  <p className="text-sm font-medium">Serial: {equipoSeleccionado.serial}</p>
                  <p className="text-sm font-medium">Hostname: {equipoSeleccionado.hostname}</p>
                  <p className="text-sm font-medium">Estado: {equipoSeleccionado.estado}</p>
                  <p className="text-sm font-medium">Último mantenimiento: {equipoSeleccionado.ultimoMantenimiento}</p>
                  <p className="text-sm font-medium">
                    Próximo mantenimiento: {equipoSeleccionado.proximoMantenimiento}
                  </p>
                  <p className="text-sm font-medium">Propietario: {equipoSeleccionado.propietario}</p>
                  <p className="text-sm font-medium">Responsable: {equipoSeleccionado.responsable}</p>
                  <p className="text-sm font-medium">Observaciones: {equipoSeleccionado.observaciones}</p>
                </div>
                <div className="flex flex-col gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleMarcarFalla(equipoSeleccionado.id)}
                    className="bg-red-500 text-white hover:bg-red-600">
                    Fallas
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleMarcarCompletado(equipoSeleccionado.id)}
                    className="bg-green-500 text-white hover:bg-green-600">
                    Completado
                  </Button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
      {tareaSeleccionada && (
        <div className="fixed inset-0 flex items-center justify-center bg-black/50">
          <div className="bg-background rounded-lg shadow-md p-6 max-w-md w-full">
            <h2 className="text-xl font-bold mb-4">Observaciones</h2>
            <Textarea
              placeholder="Ingrese las observaciones"
              value={observaciones}
              onChange={(e) => setObservaciones(e.target.value)}
              className="mb-4" />
            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={() => setTareaSeleccionada(null)}>
                Cancelar
              </Button>
              <Button onClick={handleGuardarObservaciones}>Guardar</Button>
            </div>
          </div>
        </div>
      )}
    </div>)
  );
}
